// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIPromise } from "../core/api-promise";
import { APIResource } from "../core/resource";
import { RequestOptions } from "../internal/request-options";
import * as PlacesAutocompleteAPI from "./places-autocomplete";
import * as PlacesAPI from "./places/places";

export class PlacesSearchNearby extends APIResource {
  /**
   * Search for places near locations.
   */
  search(
    body: PlacesSearchNearbySearchParams,
    options?: RequestOptions,
  ): APIPromise<PlacesSearchNearbySearchResponse> {
    return this._client.post("/v1/places:searchNearby", { body, ...options });
  }
}

/**
 * Parameters to configure the routing calculations to the places in the response,
 * both along a route (where result ranking will be influenced) and for calculating
 * travel times on results.
 */
export interface RoutingParameters {
  /**
   * An object that represents a latitude/longitude pair. This is expressed as a pair
   * of doubles to represent degrees latitude and degrees longitude. Unless specified
   * otherwise, this must conform to the
   * <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
   * standard</a>. Values must be within normalized ranges.
   */
  origin?: PlacesAPI.LatLng;

  /**
   * Encapsulates a set of optional conditions to satisfy when calculating the
   * routes.
   */
  routeModifiers?: RoutingParameters.RouteModifiers;

  /**
   * Optional. Specifies how to compute the routing summaries. The server attempts to
   * use the selected routing preference to compute the route. The traffic aware
   * routing preference is only available for the `DRIVE` or `TWO_WHEELER`
   * `travelMode`.
   */
  routingPreference?:
    | "ROUTING_PREFERENCE_UNSPECIFIED"
    | "TRAFFIC_UNAWARE"
    | "TRAFFIC_AWARE"
    | "TRAFFIC_AWARE_OPTIMAL";

  /**
   * Optional. The travel mode.
   */
  travelMode?:
    | "TRAVEL_MODE_UNSPECIFIED"
    | "DRIVE"
    | "BICYCLE"
    | "WALK"
    | "TWO_WHEELER";
}

export namespace RoutingParameters {
  /**
   * Encapsulates a set of optional conditions to satisfy when calculating the
   * routes.
   */
  export interface RouteModifiers {
    /**
     * Optional. When set to true, avoids ferries where reasonable, giving preference
     * to routes not containing ferries. Applies only to the `DRIVE` and `TWO_WHEELER`
     * [`TravelMode`][google.maps.places.v1.TravelMode].
     */
    avoidFerries?: boolean;

    /**
     * Optional. When set to true, avoids highways where reasonable, giving preference
     * to routes not containing highways. Applies only to the `DRIVE` and `TWO_WHEELER`
     * [`TravelMode`][google.maps.places.v1.TravelMode].
     */
    avoidHighways?: boolean;

    /**
     * Optional. When set to true, avoids navigating indoors where reasonable, giving
     * preference to routes not containing indoor navigation. Applies only to the
     * `WALK` [`TravelMode`][google.maps.places.v1.TravelMode].
     */
    avoidIndoor?: boolean;

    /**
     * Optional. When set to true, avoids toll roads where reasonable, giving
     * preference to routes not containing toll roads. Applies only to the `DRIVE` and
     * `TWO_WHEELER` [`TravelMode`][google.maps.places.v1.TravelMode].
     */
    avoidTolls?: boolean;
  }
}

/**
 * The duration and distance from the routing origin to a place in the response,
 * and a second leg from that place to the destination, if requested. **Note:**
 * Adding `routingSummaries` in the field mask without also including either the
 * `routingParameters.origin` parameter or the
 * `searchAlongRouteParameters.polyline.encodedPolyline` parameter in the request
 * causes an error.
 */
export interface RoutingSummary {
  /**
   * A link to show directions on Google Maps using the waypoints from the given
   * routing summary. The route generated by this link is not guaranteed to be the
   * same as the route used to generate the routing summary. The link uses
   * information provided in the request, from fields including `routingParameters`
   * and `searchAlongRouteParameters` when applicable, to generate the directions
   * link.
   */
  directionsUri?: string;

  /**
   * The legs of the trip.
   *
   * When you calculate travel duration and distance from a set origin, `legs`
   * contains a single leg containing the duration and distance from the origin to
   * the destination. When you do a search along route, `legs` contains two legs: one
   * from the origin to place, and one from the place to the destination.
   */
  legs?: Array<RoutingSummary.Leg>;
}

export namespace RoutingSummary {
  /**
   * A leg is a single portion of a journey from one location to another.
   */
  export interface Leg {
    /**
     * The distance of this leg of the trip.
     */
    distanceMeters?: number;

    /**
     * The time it takes to complete this leg of the trip.
     */
    duration?: string;
  }
}

/**
 * Response proto for Search Nearby.
 */
export interface PlacesSearchNearbySearchResponse {
  /**
   * A list of places that meets user's requirements like places types, number of
   * places and specific location restriction.
   */
  places?: Array<PlacesAPI.Place>;

  /**
   * A list of routing summaries where each entry associates to the corresponding
   * place in the same index in the `places` field. If the routing summary is not
   * available for one of the places, it will contain an empty entry. This list
   * should have as many entries as the list of places if requested.
   */
  routingSummaries?: Array<RoutingSummary>;
}

export interface PlacesSearchNearbySearchParams {
  /**
   * The region to search.
   */
  locationRestriction: PlacesSearchNearbySearchParams.LocationRestriction;

  /**
   * Excluded primary Place type (e.g. "restaurant" or "gas_station") from
   * https://developers.google.com/maps/documentation/places/web-service/place-types.
   *
   * Up to 50 types from
   * [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
   * may be specified.
   *
   * If there are any conflicting primary types, i.e. a type appears in both
   * included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is
   * returned.
   *
   * If a Place type is specified with multiple type restrictions, only places that
   * satisfy all of the restrictions are returned. For example, if we have
   * {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]}, the
   * returned places provide "restaurant" related services but do not operate
   * primarily as "restaurants".
   */
  excludedPrimaryTypes?: Array<string>;

  /**
   * Excluded Place type (eg, "restaurant" or "gas_station") from
   * https://developers.google.com/maps/documentation/places/web-service/place-types.
   *
   * Up to 50 types from
   * [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
   * may be specified.
   *
   * If the client provides both included_types (e.g. restaurant) and excluded_types
   * (e.g. cafe), then the response should include places that are restaurant but not
   * cafe. The response includes places that match at least one of the included_types
   * and none of the excluded_types.
   *
   * If there are any conflicting types, i.e. a type appears in both included_types
   * and excluded_types, an INVALID_ARGUMENT error is returned.
   *
   * If a Place type is specified with multiple type restrictions, only places that
   * satisfy all of the restrictions are returned. For example, if we have
   * {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]}, the
   * returned places provide "restaurant" related services but do not operate
   * primarily as "restaurants".
   */
  excludedTypes?: Array<string>;

  /**
   * Included primary Place type (e.g. "restaurant" or "gas_station") from
   * https://developers.google.com/maps/documentation/places/web-service/place-types.
   * A place can only have a single primary type from the supported types table
   * associated with it.
   *
   * Up to 50 types from
   * [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
   * may be specified.
   *
   * If there are any conflicting primary types, i.e. a type appears in both
   * included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is
   * returned.
   *
   * If a Place type is specified with multiple type restrictions, only places that
   * satisfy all of the restrictions are returned. For example, if we have
   * {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]}, the
   * returned places provide "restaurant" related services but do not operate
   * primarily as "restaurants".
   */
  includedPrimaryTypes?: Array<string>;

  /**
   * Included Place type (eg, "restaurant" or "gas_station") from
   * https://developers.google.com/maps/documentation/places/web-service/place-types.
   *
   * Up to 50 types from
   * [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
   * may be specified.
   *
   * If there are any conflicting types, i.e. a type appears in both included_types
   * and excluded_types, an INVALID_ARGUMENT error is returned.
   *
   * If a Place type is specified with multiple type restrictions, only places that
   * satisfy all of the restrictions are returned. For example, if we have
   * {included_types = ["restaurant"], excluded_primary_types = ["restaurant"]}, the
   * returned places provide "restaurant" related services but do not operate
   * primarily as "restaurants".
   */
  includedTypes?: Array<string>;

  /**
   * Place details will be displayed with the preferred language if available. If the
   * language code is unspecified or unrecognized, place details of any language may
   * be returned, with a preference for English if such details exist.
   *
   * Current list of supported languages:
   * https://developers.google.com/maps/faq#languagesupport.
   */
  languageCode?: string;

  /**
   * Maximum number of results to return. It must be between 1 and 20 (default),
   * inclusively. If the number is unset, it falls back to the upper limit. If the
   * number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error
   * is returned.
   */
  maxResultCount?: number;

  /**
   * How results will be ranked in the response.
   */
  rankPreference?: "RANK_PREFERENCE_UNSPECIFIED" | "DISTANCE" | "POPULARITY";

  /**
   * The Unicode country/region code (CLDR) of the location where the request is
   * coming from. This parameter is used to display the place details, like
   * region-specific place name, if available. The parameter can affect results based
   * on applicable law.
   *
   * For more information, see
   * https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.
   *
   * Note that 3-digit region codes are not currently supported.
   */
  regionCode?: string;

  /**
   * Parameters to configure the routing calculations to the places in the response,
   * both along a route (where result ranking will be influenced) and for calculating
   * travel times on results.
   */
  routingParameters?: RoutingParameters;
}

export namespace PlacesSearchNearbySearchParams {
  /**
   * The region to search.
   */
  export interface LocationRestriction {
    /**
     * Circle with a LatLng as center and radius.
     */
    circle?: PlacesAutocompleteAPI.Circle;
  }
}

export declare namespace PlacesSearchNearby {
  export {
    type RoutingParameters as RoutingParameters,
    type RoutingSummary as RoutingSummary,
    type PlacesSearchNearbySearchResponse as PlacesSearchNearbySearchResponse,
    type PlacesSearchNearbySearchParams as PlacesSearchNearbySearchParams,
  };
}
